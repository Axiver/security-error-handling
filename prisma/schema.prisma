generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bookmarks {
  id             String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String  @db.Uuid
  notificationId String? @db.Uuid
  sell_post_id   Int
  users          users   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model notifications {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id            String    @unique @db.Uuid
  updated_at         DateTime? @default(now())
  originalPostStatus String
  sell_post_id       BigInt
  users              users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model sibkeys {
  key      String @id
  uses     Int    @default(300)
  sibEmail String

  @@unique([key, sibEmail])
}

model refresh_tokens {
  id            BigInt          @id @default(autoincrement())
  token         String          @unique(map: "refresh_tokens_token_unique")
  user_id       String          @db.Uuid
  revoked       Boolean         @default(false)
  created_at    DateTime        @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?       @db.Timestamptz(6)
  expires_at    DateTime        @db.Timestamptz(6)
  access_tokens access_tokens[]
  users         users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([id, revoked])
  @@index([user_id])
  @@index([token])
}

model access_tokens {
  id             BigInt         @id @default(autoincrement())
  token          String         @unique(map: "access_tokens_token_unique")
  user_id        String         @db.Uuid
  revoked        Boolean        @default(false)
  created_at     DateTime       @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?      @db.Timestamptz(6)
  expires_at     DateTime       @db.Timestamptz(6)
  refresh_token  BigInt
  refresh_tokens refresh_tokens @relation(fields: [refresh_token, revoked], references: [id, revoked], onDelete: Cascade)
  users          users          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id])
  @@index([token])
  @@index([refresh_token])
}

model offers {
  id       Int        @id @default(autoincrement())
  listing  BigInt
  message  BigInt
  amount   Float
  accepted Boolean    @default(false)
  listings listing?   @relation(fields: [listing], references: [id], onDelete: NoAction, onUpdate: NoAction)
  messages messages[]
}

model users {
  id                             String           @id @unique(map: "userid_unique") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                           String
  password                       String
  email                          String           @unique
  image                          String?
  bio                            String?
  companyid                      Int
  contact                        Int?
  created_at                     DateTime         @default(now()) @db.Timestamptz(6)
  enabled                        Int              @default(1)
  permissions                    Int              @default(0)
  phone                          String?
  access_tokens                  access_tokens[]
  bookmarks                      bookmarks[]
  clicks                         clicks[]
  listing                        listing[]
  messages                       messages[]
  notifications                  notifications?
  refresh_tokens                 refresh_tokens[]
  rooms_rooms_buyer_uuidTousers  rooms[]          @relation("rooms_buyer_uuidTousers")
  rooms_rooms_seller_uuidTousers rooms[]          @relation("rooms_seller_uuidTousers")
  companies                      companies        @relation(fields: [companyid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_companies")
  users_contacts                 users_contacts?  @relation(fields: [contact], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_contacts")
  users_comments                 users_comments[]

  @@index([contact], map: "fki_users_contacts")
  @@map("users")
}

model advertisements {
  id          BigInt     @id(map: "Advertisements_pkey") @default(autoincrement())
  created_at  DateTime?  @default(now()) @db.Timestamptz(6)
  company_id  Int?
  image       String?    @db.Uuid
  active      Boolean?   @default(false)
  updated_at  DateTime?  @default(now()) @db.Timestamptz(6)
  description String?
  link        String?
  companies   companies? @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  clicks      clicks[]
}

model categories_parameters {
  category   BigInt
  parameter  BigInt
  required   Boolean?  @default(true)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@id([category, parameter])
}

model category {
  id                                 BigInt    @id @default(autoincrement())
  name                               String    @unique
  description                        String
  image                              String?   @db.Uuid
  updated_at                         DateTime? @default(now()) @db.Timestamptz(6)
  created_at                         DateTime? @default(now()) @db.Timestamptz(6)
  active                             Boolean?  @default(true)
  cross_section_image                String?   @db.Uuid
  listing_listing_categoryTocategory listing[] @relation("listing_categoryTocategory")
}

model clicks {
  id             BigInt          @id @default(autoincrement())
  advertisement  BigInt?
  created_at     DateTime?       @default(now()) @db.Timestamptz(6)
  user           String?         @db.Uuid
  link           Boolean?        @default(false)
  advertisements advertisements? @relation(fields: [advertisement], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users          users?          @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model companies {
  id                 Int                  @unique(map: "companyid_unique") @default(autoincrement())
  created_at         DateTime?            @default(now()) @db.Timestamptz(6)
  name               String               @unique
  bio                String?
  website            String?
  visible            Int                  @default(1)
  image              String?
  advertisements     advertisements[]
  companies_comments companies_comments[]
  invite             invite[]
  users              users[]

  @@id([id, name])
}

model companies_comments {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  companyid  Int
  comments   String?
  companies  companies @relation(fields: [companyid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model companies_log {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  old_data   Json?
  new_data   Json?
  table      String
  actiontype dml_type
  origin     String?
}

model datatype {
  id                                     BigInt      @id @default(autoincrement())
  name                                   String
  created_at                             DateTime?   @default(now()) @db.Timestamptz(6)
  parameter_parameter_datatypeTodatatype parameter[] @relation("parameter_datatypeTodatatype")
}

model invite {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  name       String
  email      String    @unique
  company    Int
  expiry     DateTime  @db.Timestamp(6)
  token      String    @unique @default("")
  companies  companies @relation(fields: [company], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model invite_log {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  old_data   Json?
  new_data   Json?
  table      String
  actiontype dml_type
  origin     String?
}

model listing {
  id                                               BigInt            @id @default(autoincrement())
  name                                             String
  description                                      String
  price                                            Decimal           @db.Decimal
  unit_price                                       Boolean?          @default(false)
  negotiable                                       Boolean           @default(false)
  category                                         BigInt
  type                                             BigInt
  updated_at                                       DateTime?         @default(now()) @db.Timestamptz(6)
  created_at                                       DateTime?         @default(now()) @db.Timestamptz(6)
  owner                                            String            @db.Uuid
  archived                                         Boolean           @default(false)
  deleted_at                                       DateTime?         @db.Timestamptz(6)
  category_listing_categoryTocategory              category          @relation("listing_categoryTocategory", fields: [category], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                                            users             @relation(fields: [owner], references: [id], onDelete: Cascade, onUpdate: NoAction)
  listing_type                                     listing_type      @relation(fields: [type], references: [id], onDelete: NoAction, onUpdate: NoAction)
  listings_images_listings_images_listingTolisting listings_images[] @relation("listings_images_listingTolisting")
  rooms                                            rooms[]
  offers                                           offers[]
}

model listing_type {
  id         BigInt    @id @default(autoincrement())
  name       String
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  listing    listing[]
}

model listings_images {
  id                                       BigInt    @id @default(autoincrement())
  listing                                  BigInt
  image                                    String    @db.Uuid
  updated_at                               DateTime? @default(now()) @db.Timestamptz(6)
  created_at                               DateTime? @default(now()) @db.Timestamptz(6)
  listing_listings_images_listingTolisting listing   @relation("listings_images_listingTolisting", fields: [listing], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model listings_parameters_value {
  listing    BigInt
  parameter  BigInt
  value      String
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  created_at DateTime? @default(now()) @db.Timestamptz(6)

  @@id([listing, parameter], map: "listings_parameters_values_pkey")
}

model messages {
  id                 BigInt       @id @default(autoincrement())
  content            String
  content_type       content_type
  offer              Int?
  author             String       @db.Uuid
  room               BigInt
  read               Boolean      @default(false)
  created_at         DateTime     @default(now()) @db.Timestamptz(6)
  users              users        @relation(fields: [author], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rooms              rooms        @relation(fields: [room], references: [id], onDelete: NoAction, onUpdate: NoAction)
  offers             offers?      @relation(fields: [offer], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model parameter {
  id                                                       BigInt             @id(map: "paramter_pkey") @default(autoincrement())
  name                                                     String             @unique
  display_name                                             String?
  type                                                     BigInt
  datatype                                                 BigInt
  updated_at                                               DateTime?          @default(now()) @db.Timestamptz(6)
  created_at                                               DateTime?          @default(now()) @db.Timestamptz(6)
  active                                                   Boolean?           @default(true)
  datatype_parameter_datatypeTodatatype                    datatype           @relation("parameter_datatypeTodatatype", fields: [datatype], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parameter_type                                           parameter_type     @relation(fields: [type], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parameter_choices_parameter_choices_parameterToparameter parameter_choices? @relation("parameter_choices_parameterToparameter")
}

model parameter_choices {
  parameter                                        BigInt    @id
  choice                                           String[]
  updated_at                                       DateTime? @default(now()) @db.Timestamptz(6)
  created_at                                       DateTime? @default(now()) @db.Timestamptz(6)
  parameter_parameter_choices_parameterToparameter parameter @relation("parameter_choices_parameterToparameter", fields: [parameter], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model parameter_type {
  id         BigInt      @id @default(autoincrement())
  name       String
  created_at DateTime?   @default(now()) @db.Timestamptz(6)
  parameter  parameter[]
}

model rooms {
  id                             BigInt     @id @default(autoincrement())
  seller                         String     @db.Uuid
  buyer                          String     @db.Uuid
  created_at                     DateTime   @default(now()) @db.Timestamptz(6)
  listing                        BigInt
  users_rooms_buyer_uuidTousers  users      @relation("rooms_buyer_uuidTousers", fields: [buyer], references: [id], onDelete: Cascade, onUpdate: NoAction)
  listings                       listing    @relation(fields: [listing], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_rooms_seller_uuidTousers users      @relation("rooms_seller_uuidTousers", fields: [seller], references: [id], onDelete: Cascade, onUpdate: NoAction)
  messages                       messages[]
}

model users_comments {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  userid     String   @db.Uuid
  comments   String?
  users      users    @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users_contacts {
  id             Int     @unique(map: "users_contactsid_unique") @default(autoincrement())
  contact_method String
  users          users[]

  @@id([id, contact_method])
}

enum dml_type {
  INSERT
  UPDATE
  DELETE
}

enum content_type {
  text
  file
  image
  offer
}
