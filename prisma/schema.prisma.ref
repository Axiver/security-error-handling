generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "public"]
}
model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([session_id], map: "refresh_token_session_id")
  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
  @@index([token])
  @@schema("auth")
}

model sessions {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  created_at     DateTime?        @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  factor_id      String?          @db.Uuid
  aal            aal_level?
  not_after      DateTime?        @db.Timestamptz(6)
  mfa_amr_claims mfa_amr_claims[]
  refresh_tokens refresh_tokens[]
  users          auth_users       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
  @@schema("auth")
}

model auth_users {
  instance_id                 String?       @db.Uuid
  id                          String        @id @db.Uuid
  aud                         String?       @db.VarChar(255)
  role                        String?       @db.VarChar(255)
  email                       String?       @db.VarChar(255)
  encrypted_password          String?       @db.VarChar(255)
  email_confirmed_at          DateTime?     @db.Timestamptz(6)
  invited_at                  DateTime?     @db.Timestamptz(6)
  confirmation_token          String?       @db.VarChar(255)
  confirmation_sent_at        DateTime?     @db.Timestamptz(6)
  recovery_token              String?       @db.VarChar(255)
  recovery_sent_at            DateTime?     @db.Timestamptz(6)
  email_change_token_new      String?       @db.VarChar(255)
  email_change                String?       @db.VarChar(255)
  email_change_sent_at        DateTime?     @db.Timestamptz(6)
  last_sign_in_at             DateTime?     @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?     @db.Timestamptz(6)
  updated_at                  DateTime?     @db.Timestamptz(6)
  phone                       String?       @unique
  phone_confirmed_at          DateTime?     @db.Timestamptz(6)
  phone_change                String?       @default("")
  phone_change_token          String?       @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime?     @db.Timestamptz(6)
  confirmed_at                DateTime?     @default(dbgenerated("LEAST(email_confirmed_at, phone_confirmed_at)")) @db.Timestamptz(6)
  email_change_token_current  String?       @default("") @db.VarChar(255)
  email_change_confirm_status Int?          @default(0) @db.SmallInt
  banned_until                DateTime?     @db.Timestamptz(6)
  reauthentication_token      String?       @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime?     @db.Timestamptz(6)
  is_sso_user                 Boolean       @default(false)
  deleted_at                  DateTime?     @db.Timestamptz(6)
  identities                  identities[]
  mfa_factors                 mfa_factors[]
  sessions                    sessions[]
  users                       public_users?

  @@index([instance_id])
  @@map("users")
  @@schema("auth")
}

model advertisements {
  id          BigInt     @id(map: "Advertisements_pkey") @default(autoincrement())
  created_at  DateTime?  @default(now()) @db.Timestamptz(6)
  company_id  Int?
  image       String?    @db.Uuid
  active      Boolean?   @default(false)
  updated_at  DateTime?  @default(now()) @db.Timestamptz(6)
  description String?    @db.VarChar
  link        String?    @db.VarChar
  companies   companies? @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  clicks      clicks[]

  @@schema("public")
}

model categories_parameters {
  category                                             BigInt
  parameter                                            BigInt
  required                                             Boolean?  @default(true)
  updated_at                                           DateTime? @default(now()) @db.Timestamptz(6)
  created_at                                           DateTime? @default(now()) @db.Timestamptz(6)
  category_categories_parameters_categoryTocategory    category  @relation("categories_parameters_categoryTocategory", fields: [category], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parameter_categories_parameters_parameterToparameter parameter @relation("categories_parameters_parameterToparameter", fields: [parameter], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([category, parameter])
  @@schema("public")
}

model category {
  id                                                             BigInt                  @id @default(autoincrement())
  name                                                           String                  @unique @db.VarChar
  description                                                    String                  @db.VarChar
  image                                                          String?                 @db.Uuid
  updated_at                                                     DateTime?               @default(now()) @db.Timestamptz(6)
  created_at                                                     DateTime?               @default(now()) @db.Timestamptz(6)
  active                                                         Boolean?                @default(true)
  cross_section_image                                            String?                 @db.Uuid
  categories_parameters_categories_parameters_categoryTocategory categories_parameters[] @relation("categories_parameters_categoryTocategory")
  listing_listing_categoryTocategory                             listing[]               @relation("listing_categoryTocategory")

  @@schema("public")
}

model clicks {
  id             BigInt          @id @default(autoincrement())
  advertisement  BigInt?
  created_at     DateTime?       @default(now()) @db.Timestamptz(6)
  user           String?         @db.Uuid
  link           Boolean?        @default(false)
  advertisements advertisements? @relation(fields: [advertisement], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users          public_users?   @relation(fields: [user], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model companies {
  id                 Int                  @unique(map: "companyid_unique") @default(autoincrement())
  created_at         DateTime?            @default(now()) @db.Timestamptz(6)
  name               String               @unique @db.VarChar(255)
  bio                String?              @db.VarChar(512)
  website            String?              @db.VarChar(512)
  visible            Int                  @default(1) @db.SmallInt
  image              String?              @db.VarChar
  advertisements     advertisements[]
  companies_comments companies_comments[]
  invite             invite[]
  users              public_users[]

  @@id([id, name])
  @@schema("public")
}

model companies_comments {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  companyid  Int
  comments   String?   @db.VarChar(512)
  companies  companies @relation(fields: [companyid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model companies_log {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  old_data   Json?
  new_data   Json?
  table      String   @db.VarChar(100)
  actiontype dml_type
  origin     String?

  @@schema("public")
}

model contents {
  content_id BigInt     @id @default(autoincrement())
  text       String?    @db.VarChar
  file       String?    @db.VarChar
  image      String?    @db.VarChar
  created_at DateTime?  @default(now()) @db.Timestamptz(6)
  offer      BigInt?
  messages   messages[]

  @@schema("public")
}

model datatype {
  id                                     BigInt      @id @default(autoincrement())
  name                                   String      @db.VarChar
  created_at                             DateTime?   @default(now()) @db.Timestamptz(6)
  parameter_parameter_datatypeTodatatype parameter[] @relation("parameter_datatypeTodatatype")

  @@schema("public")
}

model invite {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  name       String    @db.VarChar(100)
  email      String    @unique @db.VarChar(255)
  company    Int
  expiry     DateTime  @db.Timestamp(6)
  token      String    @unique @default("")
  companies  companies @relation(fields: [company], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model invite_log {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  old_data   Json?
  new_data   Json?
  table      String   @db.VarChar(100)
  actiontype dml_type
  origin     String?

  @@schema("public")
}

model listing {
  id                                                                   BigInt                      @id @default(autoincrement())
  name                                                                 String                      @db.VarChar
  description                                                          String                      @db.VarChar
  price                                                                Decimal                     @db.Decimal
  unit_price                                                           Boolean?                    @default(false)
  negotiable                                                           Boolean?                    @default(true)
  category                                                             BigInt
  type                                                                 BigInt
  updated_at                                                           DateTime?                   @default(now()) @db.Timestamptz(6)
  created_at                                                           DateTime?                   @default(now()) @db.Timestamptz(6)
  open                                                                 Boolean?                    @default(true)
  visibility                                                           Boolean?                    @default(true)
  active                                                               Boolean?                    @default(true)
  owner                                                                String                      @db.Uuid
  category_listing_categoryTocategory                                  category                    @relation("listing_categoryTocategory", fields: [category], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                                                                public_users                @relation(fields: [owner], references: [id], onDelete: Cascade, onUpdate: NoAction)
  listing_type                                                         listing_type                @relation(fields: [type], references: [id], onDelete: NoAction, onUpdate: NoAction)
  listings_images_listings_images_listingTolisting                     listings_images[]           @relation("listings_images_listingTolisting")
  listings_parameters_value_listings_parameters_value_listingTolisting listings_parameters_value[] @relation("listings_parameters_value_listingTolisting")
  rooms                                                                rooms[]

  @@schema("public")
}

model listing_type {
  id         BigInt    @id @default(autoincrement())
  name       String    @db.VarChar
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  listing    listing[]

  @@schema("public")
}

model listings_images {
  id                                       BigInt    @id @default(autoincrement())
  listing                                  BigInt
  image                                    String    @db.Uuid
  updated_at                               DateTime? @default(now()) @db.Timestamptz(6)
  created_at                               DateTime? @default(now()) @db.Timestamptz(6)
  listing_listings_images_listingTolisting listing   @relation("listings_images_listingTolisting", fields: [listing], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model listings_parameters_value {
  listing                                                  BigInt
  parameter                                                BigInt
  value                                                    String    @db.VarChar
  updated_at                                               DateTime? @default(now()) @db.Timestamptz(6)
  created_at                                               DateTime? @default(now()) @db.Timestamptz(6)
  listing_listings_parameters_value_listingTolisting       listing   @relation("listings_parameters_value_listingTolisting", fields: [listing], references: [id], onDelete: Cascade, onUpdate: NoAction)
  parameter_listings_parameters_value_parameterToparameter parameter @relation("listings_parameters_value_parameterToparameter", fields: [parameter], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([listing, parameter], map: "listings_parameters_values_pkey")
  @@schema("public")
}

model messages {
  id           BigInt        @id @default(autoincrement())
  content      BigInt?
  profile_uuid String?       @db.Uuid
  room_id      BigInt?
  status       String?       @db.VarChar
  created_at   DateTime?     @default(now()) @db.Timestamptz(6)
  contents     contents?     @relation(fields: [content], references: [content_id], onDelete: NoAction, onUpdate: NoAction)
  users        public_users? @relation(fields: [profile_uuid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rooms        rooms?        @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model parameter {
  id                                                                       BigInt                      @id(map: "paramter_pkey") @default(autoincrement())
  name                                                                     String                      @unique @db.VarChar
  display_name                                                             String?                     @db.VarChar
  type                                                                     BigInt
  datatype                                                                 BigInt
  updated_at                                                               DateTime?                   @default(now()) @db.Timestamptz(6)
  created_at                                                               DateTime?                   @default(now()) @db.Timestamptz(6)
  active                                                                   Boolean?                    @default(true)
  categories_parameters_categories_parameters_parameterToparameter         categories_parameters[]     @relation("categories_parameters_parameterToparameter")
  listings_parameters_value_listings_parameters_value_parameterToparameter listings_parameters_value[] @relation("listings_parameters_value_parameterToparameter")
  datatype_parameter_datatypeTodatatype                                    datatype                    @relation("parameter_datatypeTodatatype", fields: [datatype], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parameter_type                                                           parameter_type              @relation(fields: [type], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parameter_choices_parameter_choices_parameterToparameter                 parameter_choices?          @relation("parameter_choices_parameterToparameter")

  @@schema("public")
}

model parameter_choices {
  parameter                                        BigInt    @id
  choice                                           String[]  @db.VarChar
  updated_at                                       DateTime? @default(now()) @db.Timestamptz(6)
  created_at                                       DateTime? @default(now()) @db.Timestamptz(6)
  parameter_parameter_choices_parameterToparameter parameter @relation("parameter_choices_parameterToparameter", fields: [parameter], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@schema("public")
}

model parameter_type {
  id         BigInt      @id @default(autoincrement())
  name       String      @db.VarChar
  created_at DateTime?   @default(now()) @db.Timestamptz(6)
  parameter  parameter[]

  @@schema("public")
}

model rooms {
  id                             BigInt        @id @default(autoincrement())
  seller_uuid                    String?       @db.Uuid
  buyer_uuid                     String?       @db.Uuid
  created_at                     DateTime?     @default(now()) @db.Timestamptz(6)
  listing_id                     BigInt?
  messages                       messages[]
  users_rooms_buyer_uuidTousers  public_users? @relation("rooms_buyer_uuidTousers", fields: [buyer_uuid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  listing                        listing?      @relation(fields: [listing_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_rooms_seller_uuidTousers public_users? @relation("rooms_seller_uuidTousers", fields: [seller_uuid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model public_users {
  id                             String           @unique(map: "userid_unique") @db.Uuid
  created_at                     DateTime         @default(now()) @db.Timestamptz(6)
  fullname                       String           @db.VarChar(255)
  phone                          String?          @db.VarChar(14)
  email                          String           @db.VarChar(255)
  contact                        Int?             @db.SmallInt
  bio                            String?          @db.VarChar(512)
  companyid                      Int
  permissions                    Int              @default(0) @db.SmallInt
  enabled                        Int              @default(1) @db.SmallInt
  image                          String?          @db.VarChar
  clicks                         clicks[]
  listing                        listing[]
  messages                       messages[]
  rooms_rooms_buyer_uuidTousers  rooms[]          @relation("rooms_buyer_uuidTousers")
  rooms_rooms_seller_uuidTousers rooms[]          @relation("rooms_seller_uuidTousers")
  companies                      companies        @relation(fields: [companyid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_companies")
  users_contacts                 users_contacts?  @relation(fields: [contact], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_contacts")
  users                          auth_users       @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_comments                 users_comments[]

  @@id([id, email])
  @@index([contact], map: "fki_users_contacts")
  @@map("users")
  @@schema("public")
}

model users_comments {
  id         Int          @id @default(autoincrement())
  created_at DateTime     @default(now()) @db.Timestamptz(6)
  userid     String       @db.Uuid
  comments   String?      @db.VarChar(512)
  users      public_users @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model users_contacts {
  id             Int            @unique(map: "users_contactsid_unique") @default(autoincrement())
  contact_method String         @db.VarChar(255)
  users          public_users[]

  @@id([id, contact_method])
  @@schema("public")
}

model users_log {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  old_data   Json?
  new_data   Json?
  table      String   @db.VarChar(100)
  actiontype dml_type
  origin     String?  @default(dbgenerated("auth.uid()"))

  @@schema("public")
}

enum aal_level {
  aal1
  aal2
  aal3

  @@schema("auth")
}

enum factor_status {
  unverified
  verified

  @@schema("auth")
}

enum factor_type {
  totp
  webauthn

  @@schema("auth")
}

enum dml_type {
  INSERT
  UPDATE
  DELETE

  @@schema("public")
}
