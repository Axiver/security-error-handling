generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String?
  password             String?
  email                String?                @unique
  emailVerified        DateTime?              @map("email_verified")
  image                String?
  role                 Int                    @default(1)
  SellPostUserBookmark SellPostUserBookmark[]
  SellPost             SellPost[]
  Notification         UserNotification?

  @@map("users")
}

model UserNotification {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String    @unique @map("user_id") @db.Uuid
  updatedAt          DateTime? @default(now()) @map("updated_at")
  originalPostStatus String
  sellPostId         String    @map("sell_post_id") @db.Uuid
  SellPost           SellPost  @relation(fields: [sellPostId], references: [id], onDelete: Cascade)
  User               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model SellPost {
  id               String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  description      String
  status           String
  sellerId         String                 @map("seller_id") @db.Uuid
  Bookmark         SellPostUserBookmark[]
  seller           User                   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  UserNotification UserNotification[]
}

model SellPostUserBookmark {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String   @map("user_id") @db.Uuid
  sellPostId     String   @map("sell_post_id") @db.Uuid
  notificationId String?  @db.Uuid
  sellPost       SellPost @relation(fields: [sellPostId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, sellPostId])
  @@map("Bookmark")
}

model SIBKey {
  key      String @id
  uses     Int    @default(300)
  sibEmail String

  @@unique([key, sibEmail])
  @@map("sibkeys")
}
